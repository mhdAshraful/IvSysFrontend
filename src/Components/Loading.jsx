import * as THREE from "three";
import React, { useRef } from "react";
import { Canvas, extend, useFrame } from "@react-three/fiber";
import { OrbitControls, shaderMaterial, Html } from "@react-three/drei";
import vertex from "@assets/LoadingShader/rotatingV.glsl";
import fragment from "@assets/LoadingShader/rotatingF.glsl";
import { useGLTF, useTexture } from "@react-three/drei";
import mybox from "@assets/box.glb";
import { useControls } from "leva";
import matcap2 from "@assets/10pxGreen.png";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

function Model(props) {
  const { nodes, materials } = useGLTF(mybox);
  const myboxref = useRef();
  const matref = useRef();
  const texture = useTexture(matcap2);

  const BoxMaterial = new shaderMaterial(
    {
      // must use iTime: {value: 0} formate
      uTime: { value: 0 },
      uColorStart: { value: new THREE.Color("hotpink") },
      uColorEnd: { value: new THREE.Color("white") },
      uSpeed: { value: 0.6 },
      uNoiseDensity: { value: 1.4 },
      uNoiseStrength: { value: 0.2 },
      uIntensity: { value: 3 },
      uFrequency: { value: 6 },
      uAmplitude: { value: 7 },
      uDistortion: { value: 5 },
      uProgress: { value: 1 },
      uProgress2: { value: 0.5 },
      uAlpha: { value: 1 },
      uAxis: { value: new THREE.Vector3() },
      uAxis2: { value: new THREE.Vector3() },
      resolution: { value: new THREE.Vector4() },
      matcaptexture: { value: null },
    },
    vertex,
    fragment
  );
  extend({ BoxMaterial });

  useFrame(({ clock }, delta) => {
    // myboxref.current.rotation.y += 0.01;
    matref.current.uniforms.uTime.value += delta;
    matref.current.uniforms.matcaptexture.value = texture;
    matref.current.uniforms.uAxis.value = new THREE.Vector3(1, 1, 1);

    // console.log("posiiton", myboxref.current.position);
  });

  return (
    <>
      <group {...props} dispose={null}>
        {/* <axesHelper args={[10]} /> */}
        <mesh
          ref={myboxref}
          flat
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
        >
          <boxMaterial
            key={BoxMaterial.key}
            ref={matref}
            uTime={0}
            uSpeed
            uNoiseDensity
            uNoiseStrength
            uIntensity
            uFrequency
            uAmplitude
            uDistortion
            uProgress
            uProgress2
            uAxis={new THREE.Vector3()}
            uAxis2={new THREE.Vector3(1, 0, 0)}
            uAlpha
            resolution={new THREE.Vector4()}
            matcaptexture={null}
            attach="material"
          />
        </mesh>
      </group>
    </>
  );
}
const Loading = (props) => {
  return (
    // props are for styling
    <Canvas
      tonemapped={"true"}
      shadows
      {...props}
      camera={{ fov: 75, near: 0.01, far: 50, position: [-10, 10, 10] }}
    >
      <color attach="background" args={["#f6ffe5"]} />
      <ambientLight intensity={2} />
      <spotLight
        position={[-20, 0, 20]}
        intensity={1.4}
        angle={0.15}
        penumbra={1}
        castShadow
      />
      <Model />
    </Canvas>
  );
};
useGLTF.preload(mybox);
export default Loading;

/**
 * 
 *  <>
      <mesh
        ref={myboxref}
        flat
        castShadow
        receiveShadow
        // rotation={[10, 10, 0]}
      >
        <boxGeometry
          ref={boxg}
          args={[2, 2, 2, 20, 20, 20]}
          attach="geometry"
        />

        <boxMaterial
          key={BoxMaterial.key}
          ref={matref}
          uTime={0}
          uColorStart={uColorStart}
          uColorEnd={uColorEnd}
          uSpeed={uSpeed}
          uNoiseDensity={uNoiseDensity}
          uNoiseStrength={uNoiseStrength}
          uIntensity={uIntensity}
          uFrequency={uFrequency}
          uAmplitude={uAmplitude}
          uDistortion={uDistortion}
          uProgress={uProgress}
          uProgress2={uProgress2}
          uAxis={new THREE.Vector3()}
          uAxis2={new THREE.Vector3(1, 0, 0)}
          uAlpha={uAlpha}
          resolution={new THREE.Vector4()}
          matcaptexture={null}
          attach="material"
        />
      </mesh>
    </>
 * 
 * 
 */

/***
    const {
    uColorStart,
    uColorEnd,
    uSpeed,
    uNoiseDensity,
    uNoiseStrength,
    uIntensity,
    uFrequency,
    uAmplitude,
    uDistortion,
    uProgress,
    uProgress2,
    uAlpha,
  } = useControls({
    uColorStart: { min: -10, max: 30, value: 3 },
    uColorEnd: { min: -10, max: 30, value: 3 },
    uSpeed: { min: 0, max: 3, value: 0.6 },
    uNoiseDensity: { min: -10, max: 30, value: 1.4 },
    uNoiseStrength: { min: -10, max: 30, value: 0.2 },
    uFrequency: { min: -10, max: 30, value: 3 },
    uAmplitude: { min: -10, max: 30, value: 6 },
    uIntensity: { min: -10, max: 30, value: 7 },
    uDistortion: { min: 0, max: 8, value: 5 },
    uProgress: { min: 0, max: 1, value: 0 },
    uProgress2: { min: -10, max: 30, value: 3.4 },
    uAlpha: { min: 0, max: 1, value: 1 },
  });
     */
